vim中的宏录制
本质就是将一系列命令存储到vim中的一个寄存器中，然后可以重复执行这一串命令

当一个宏在执行过程中出现错误时，会停下来
在存在搜索的宏中，vim默认搜索到底部会跳转到文件开头重新所搜
可以通过 :set nowrapscan 命令禁用这种行为

# 录制和回访宏的命令
q<reg>   将宏路录制到指定的寄存器中
q        保存录制的宏并退出
@<reg>   回放寄存器中的宏，可以在该命令前机上数字表示执行几次
@@       回访最后一次运行的宏，可以在该命令前机上数字表示执行几次

# 查看寄存器中宏的内容
:echo @<reg>   查看寄存器中的内容

# 快速编辑寄存器中的宏
:new   打开一个新窗口
"ap    将寄存器a中的宏粘贴出来
...    进行编辑
_      回到行首
"ay$   将整行内容重新复制会寄存器a中

# 清除寄存器中的宏
q<reg>q

# 递归宏
递归宏的本质就是在录制完成前，调用自己，比如将某些命令录入到寄存器a中
qa....@aq 解释如下
qa    表示使用寄存器a录制宏
...   表示一些录制的命令
@a    表示递归调用自己
q     保存录制的宏并退出
也可以将已经存在宏修改为递归宏，如下
qA@aq
qA   已追加方式向寄存器中a中追加命令
@a   表示递归调用自己身
q    保存录制的宏并退出

# 跨文件运行宏
可以借助参数列表
:arg **/*.py
:argdo execute ":normal @a" | update
normal @a 表示在正常模式中执行寄存器a中的宏